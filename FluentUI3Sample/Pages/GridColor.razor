@page "/gridcolor"
@using FluentUI3Sample.Data;
@inject HttpClient Http

<h3>GridColor</h3>
@if (forecasts == null)
{
    <FluentDataGrid GenerateHeader="GenerateHeaderOption.None" TGridItem="string">
        <FluentDataGridRow RowType="DataGridRowType.Header">
            <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.ColumnHeader">Date</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.ColumnHeader">Temp. (C)</FluentDataGridCell>
            <FluentDataGridCell GridColumn="3" CellType="DataGridCellType.ColumnHeader">Temp. (F)</FluentDataGridCell>
            <FluentDataGridCell GridColumn="4" CellType="DataGridCellType.ColumnHeader">Summary</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="2"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="3"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="4"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="2"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="3"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="4"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="2"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="3"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="4"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="2"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="3"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="4"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="2"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="3"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
            <FluentDataGridCell GridColumn="4"><FluentSkeleton Height="20" Width="30" /></FluentDataGridCell>
        </FluentDataGridRow>

    </FluentDataGrid>
}
else
{
    <FluentDataGrid Items="@forecasts.AsQueryable()" TGridItem="WeatherForecast" RowStyle="RowStyle">
        <PropertyColumn Property="@(p => p.Date.ToShortDateString())" Title="Date" />
        <PropertyColumn Property="@(p => p.TemperatureC)" Title="Temp. (C)" />
        <PropertyColumn Property="@(p => p.TemperatureF)" Title="Temp. (F)" />
        <PropertyColumn Property="@(p => p.Summary)" Title="Summary" />
        <TemplateColumn Title="Actions">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" Title="編集" aria-label="編集" />
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" Title="削除" aria-label="削除" />
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    private WeatherForecast[]? forecasts;

    private string RowStyle(WeatherForecast forecast)
    {
        if (forecast.TemperatureC > 30)
        {
            return "background-color: red;";
        }
        else if (forecast.TemperatureC > 20)
        {
            return "background-color: yellow;";
        }
        else if (forecast.TemperatureC > 10)
        {
            return "background-color: green;";
        }
        else if (forecast.TemperatureC > 0)
        {
            return "background-color: blue;";
        }
        else
        {
            return "background-color: gray;";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
            await Task.Delay(10);
            StateHasChanged();
        }
    }

}
@code {

}
